#!/usr/bin/env lein-exec
;; to  get `lein exec` and `lein-exec` script see https://github.com/kumarshantanu/lein-exec

(ns new-post
  (:require [clojure.java.io :as io]
            [clojure.string :as str])
  (:import [java.text Normalizer Normalizer$Form]))

(defn- remove-diacritical-marks
  "Return a version of S with diacritical marks removed."
  ^String [^String s]
  (when (seq s)
    (str/replace
     ;; First, "decompose" the characters. e.g. replace 'LATIN CAPITAL LETTER A WITH ACUTE' with 'LATIN CAPITAL LETTER
     ;; A' + 'COMBINING ACUTE ACCENT' See http://docs.oracle.com/javase/8/docs/api/java/text/Normalizer.html
     (Normalizer/normalize s Normalizer$Form/NFD)
     ;; next, remove the combining diacritical marks -- this SO answer explains what's going on here best:
     ;; http://stackoverflow.com/a/5697575/1198455 The closest thing to a relevant JavaDoc I could find was
     ;; http://docs.oracle.com/javase/7/docs/api/java/lang/Character.UnicodeBlock.html#COMBINING_DIACRITICAL_MARKS
     #"\p{Block=CombiningDiacriticalMarks}+"
     "")))

(def ^:private slugify-valid-chars
  "Valid *ASCII* characters for URL slugs generated by `slugify`."
  #{\a \b \c \d \e \f \g \h \i \j \k \l \m \n \o \p \q \r \s \t \u \v \w \x \y \z
    \0 \1 \2 \3 \4 \5 \6 \7 \8 \9
    \-})

;; unfortunately it seems that this doesn't fully-support Emoji :(, they get encoded as "??"
(defn- slugify-char [^Character c]
  (when (contains? slugify-valid-chars c)
    c))

(defn- slugify [post-name]
  (str/join (for [c (-> post-name
                        str/lower-case
                        remove-diacritical-marks
                        (str/replace #"\s+" "-"))]
              (slugify-char c))))

(defn- datetime-str [^String format-string]
  (.format (java.text.SimpleDateFormat. format-string) (java.util.Date. (System/currentTimeMillis))))

(defn- post-filename [post-name]
  (format "%s-%s.markdown" (datetime-str "yyyy-MM-dd") (slugify post-name)))

(defn- post-contents ^String [post-name]
  (str
   "---\n"
   "layout: post\n"
   (format "title: \"%s\"\n" post-name)
   (format "date: %s\n" (datetime-str "yyyy-MM-dd hh:mm:ss ZZZ"))
   "categories:\n"
   "---\n"))

(defn- create-post! [post-name]
  (let [filename (str "_posts/" (post-filename post-name))]
    (with-open [os (io/writer (io/file filename))]
      (.write os (post-contents post-name))
      (.flush os))
    (println "Created" filename)))


(when-not (= (count *command-line-args*) 2)
  (println "Usage: ./bin/new_post.sh 'My new post name'")
  (System/exit -1))

(create-post! (second *command-line-args*))
